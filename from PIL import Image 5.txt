from PIL import Image

# Function to convert string to binary (with delimiter)
def string_to_bin(text):
    return ''.join([format(ord(char), '08b') for char in text]) + '00000000'  # End marker

# Hide message inside image
def encode_lsb(image_path, output_path, message):
    img = Image.open(image_path)
    binary_message = string_to_bin(message)
    data = list(img.getdata())
    new_data = []
    msg_idx = 0

    for pixel in data:
        r, g, b = pixel
        if msg_idx < len(binary_message):
            r = (r & ~1) | int(binary_message[msg_idx])
            msg_idx += 1
        if msg_idx < len(binary_message):
            g = (g & ~1) | int(binary_message[msg_idx])
            msg_idx += 1
        if msg_idx < len(binary_message):
            b = (b & ~1) | int(binary_message[msg_idx])
            msg_idx += 1
        new_data.append((r, g, b))
    img.putdata(new_data)
    img.save(output_path)
    print(f"Message hidden successfully in {output_path}")

# Retrieve hidden message from image
def decode_lsb(image_path):
    img = Image.open(image_path)
    data = list(img.getdata())
    binary_message = ''
    
    for pixel in data:
        for color in pixel[:3]:
            binary_message += str(color & 1)
    
    chars = [binary_message[i:i+8] for i in range(0, len(binary_message), 8)]
    message = ''
    for char in chars:
        if char == '00000000':  # End marker
            break
        message += chr(int(char, 2))
    return message

# Create a simple image to test
img = Image.new('RGB', (120, 120), color='yellow')
img.save('source.png')

# Hide message
encode_lsb('source.png', 'stego_img.png', 'Stego Test 123')

# Retrieve and print hidden message
result = decode_lsb('stego_img.png')
print("Hidden message retrieved:", result)
