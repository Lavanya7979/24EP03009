from PIL import Image

# Function to convert message to binary with end marker
def text_to_binary(text):
    return ''.join(format(ord(c), '08b') for c in text) + '1111111111111110'  # end marker

# Function to hide text in image
def hide_message(input_image_path, output_image_path, message):
    img = Image.open(input_image_path)
    bin_msg = text_to_binary(message)
    pixels = list(img.getdata())
    new_pixels = []
    msg_idx = 0
    
    for pixel in pixels:
        r, g, b = pixel
        if msg_idx < len(bin_msg):
            r = (r & ~1) | int(bin_msg[msg_idx])
            msg_idx += 1
        if msg_idx < len(bin_msg):
            g = (g & ~1) | int(bin_msg[msg_idx])
            msg_idx += 1
        if msg_idx < len(bin_msg):
            b = (b & ~1) | int(bin_msg[msg_idx])
            msg_idx += 1
        new_pixels.append((r, g, b))
    
    img.putdata(new_pixels)
    img.save(output_image_path)
    print(f"Message hidden in: {output_image_path}")

# Function to retrieve hidden text
def reveal_message(stego_image_path):
    img = Image.open(stego_image_path)
    pixels = list(img.getdata())
    bin_msg = ''
    
    for pixel in pixels:
        for color in pixel[:3]:
            bin_msg += str(color & 1)
    
    bytes_list = [bin_msg[i:i+8] for i in range(0, len(bin_msg), 8)]
    message = ''
    for byte in bytes_list:
        if byte == '11111110':  # end marker byte
            break
        message += chr(int(byte, 2))
    
    return message

# Generate image to use
img = Image.new('RGB', (150, 150), color='green')
img.save('plain.png')

# Hide a message
hide_message('plain.png', 'stego.png', 'Stego')

# Retrieve and display hidden message
hidden = reveal_message('stego.png')
print("Hidden message retrieved:", hidden)
